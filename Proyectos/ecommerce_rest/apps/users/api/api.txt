
@api_view(['GET','POST'])
def user_api_view(request):

    # list
    if request.method == 'GET':
        
        # queryset
        users = User.objects.all().values('id','username','email','password')
        users_serializer = UserListSerializer(users,many = True)
        
        return Response(users_serializer.data, status=status.HTTP_200_OK)
        # test_data = {
        #     'name' : 'develop',
        #     'email':'test@gmail.com'
        # }

        # test_user = TestUserSerializer(data = test_data, context= test_data)
    
        # if test_user.is_valid(): #validaciones en serialize.py
        #     user_instance = test_user.save()
        #     print(user_instance)
        # else:
        #     print(test_user.errors)
        

    # create
    elif request.method == 'POST':
        users_serializer = UserSerializer(data = request.data)
       
        #validation
        if users_serializer.is_valid():
            users_serializer.save()
            return Response({'message' : 'Usuario creado correctamente!'}, status=status.HTTP_201_CREATED)
        return Response(users_serializer.errors)


@api_view(['GET', 'PUT', 'DELETE'])
def user_detail_api_view(request, pk):
    #queryset
    user = User.objects.filter(id = pk).first()

    # validation
    if user:

        # retrieve  
        if request.method == 'GET':
            
            user_serializer = UserSerializer(user)
            return Response(user_serializer.data, status=status.HTTP_200_OK)

        # update
        elif request.method == 'PUT':
            users_serializer = UserSerializer(user, data = request.data)
            if users_serializer.is_valid():
                users_serializer.save()
                return Response(users_serializer.data, status=status.HTTP_200_OK)
            return Response(users_serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        # delete
        elif request.method == 'DELETE':
            user.delete()
            return Response({'message' : 'Usuario eliminado correctamente!'}, status=status.HTTP_200_OK)

    return Response({'message' : 'No se ha encontrado usuario con estos datos'}, status=status.HTTP_400_BAD_REQUEST)